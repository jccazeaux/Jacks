{"name":"Jacks","tagline":"Fluent ajax framework","body":"![Travis CI](https://travis-ci.org/jccazeaux/Jacks.svg?branch=master)\r\n\r\n# Jacks\r\nFluent extensible ajax framework.\r\n\r\nGET http://my.api/todos?limit=50\r\n```Javascript\r\njacks().get(\"http://my.api/todos\")\r\n     .query(\"limit\", \"50\")\r\n     .header(\"Accepts\", \"application/json\")\r\n     .send(function(jacksResponse) {\r\n     \t// Callback success\r\n     }, function(jacksError) {\r\n     \t// Callback error\r\n     });\r\n```\r\n\r\nPOST \r\n```Javascript\r\njacks().post(\"http://my.api/todos\")\r\n     .body({\"title\": \"Finish the job\", \r\n\t    \"date\": \"2015/12/31\"})\r\n     .header(\"Content-Type\", \"application/json\")\r\n     .send(function(jacksResponse) {\r\n     \t// Callback success\r\n     }, function(jacksError) {\r\n     \t// Callback error\r\n     });\r\n```\r\n\r\n# Installation\r\n\r\n* Download the [latest release](https://github.com/jccazeaux/jacks/releases/download/v0.2.1/jacks.min.js).\r\n* Clone the repo: `git clone https://github.com/jccazeaux/jacks.git`.\r\n* Install with npm: `npm install jacks-js`.\r\n\r\n\r\n# Main API\r\n## jacks()\r\nThis creates a new instance of jacks. This instance will be an empty shell and the base to create requests. Each instance will have its own configuration (see plugins and use). So you can have many instances of jacks, each using different sorts of configuration. In your application you should keep the instances in a context to avoid a recreation each time you need it.\r\n\r\nA jacks instance is only the beginning, to start a request use the methods described below.\r\n\r\n## jacks().get(&lt;String&gt; url)\r\nCreates a GET JacksRequest with the url\r\n\r\n## jacks().post(&lt;String&gt; url)\r\nCreates a POST JacksRequest with the url\r\n\r\n## jacks().put(&lt;String&gt; url)\r\nCreates a PUT JacksRequest with the url\r\n\r\n## jacks().delete(&lt;String&gt; url)\r\nCreates a DELETE JacksRequest with the url\r\n\r\n## jacks().options(&lt;String&gt; url)\r\nCreates a OPTIONS JacksRequest with the url\r\n\r\n## jacks().head(&lt;String&gt; url)\r\nCreates a HEAD JacksRequest with the url\r\n\r\n## jacks.plugin(&lt;String&gt; pluginName, &lt;Function&gt; pluginFn)\r\nYou can add a plugin to jacks using the plugin() function on jacks (not on request)\r\n```javascript\r\njacks.plugin(\"pluginName\", function(jacksRequest) {\r\n\t// Access to all request methods\r\n});\r\n```\r\nA plugin is a function wich receives the request as parameter.\r\n\r\n## jacks.use(&lt;String&gt; pluginName) | use(&lt;Function&gt; pluginFn)\r\nUse a plugin. Parameter can be the name of a declared plugin or a function for a live plugin\r\n```Javascript\r\njacks().use(\"myPlugin\")\r\n     .use(function(jacksRequest) {\r\n\t// Plugin code\r\n     })\r\n```\r\nThis plugin will be used for all requests.\r\n\r\n## Mocks\r\nJacks comes with a mock API.\r\n\r\n```Javascript\r\njacks.mock(request, response);\r\n```\r\n\r\n### request\r\nRequest defines wich requests are mocked. It contains two attributes\r\n\r\n* url : url of mocked resource. Can be a String or a regular expression\r\n* method : mocked method. If not specifed, all methods will be mocked\r\n\r\n### response\r\nMocked response to send\r\n\r\n* responseText : Text of the response\r\n* response : function callback to create a dynamic responseText. The function takes as only parameter a \"done\" callback. Use it if your callback is asynchronous.\r\n* headers : response headers\r\n* status : status code\r\n* statusText : status text\r\n* error : mock an error\r\n* delay : simulates a delayed response. In ms.\r\n\r\n### Exemples\r\n#### Basic mock\r\n\r\n```Javascript\r\njacks.mock({\r\n     url: \"/myurl\"\r\n}, {\r\n     responseText: \"My mocked response\",\r\n     headers: {\"Content-Type\": \"plain/text\"}\r\n});\r\n```\r\n#### Dynamic mock\r\n\r\n```Javascript\r\njacks.mock({\r\n     url: \"/myurl\"\r\n}, {\r\n     response: function() {\r\n          this.responseText = \"My dynamic mock\";\r\n     },\r\n     headers: {\"Content-Type\": \"plain/text\"}\r\n});\r\n```\r\n\r\n#### Asynchronous dynamic mock\r\n\r\n```Javascript\r\njacks.mock({\r\n     url: \"/myurl\"\r\n}, {\r\n     response: function(done) {\r\n          var that = this;\r\n          setTimeout(function() {\r\n               that.responseText = \"My dynamic mock\";\r\n               done();\r\n          }, 0);\r\n     },\r\n     headers: {\"Content-Type\": \"plain/text\"}\r\n});\r\n```\r\n\r\n\r\n# JacksRequest API\r\n## jacksRequest.body(&lt;Object&gt; data)\r\nSets the body. Only for POST and PUT\r\n```Javascript\r\njacks().post(\"http://myurl\")\r\n     .body({\"age\": 35, \"city\": \"Bordeaux\"})\r\n     .send(function(jacksReponse) {\r\n     \t// Callback success\r\n     }, function(jacksError) {\r\n     \t// Callback error\r\n     });\r\n```\r\n\r\n## jacksRequest.query(&lt;String&gt; name, &lt;String&gt; value) | query(&lt;Object&gt; params)\r\nAdd query parameters. Will concatenate the query parameters to the URL.\r\n```Javascript\r\njacks().get(\"http://myurl\")\r\n     .query(\"age\", \"35\")\r\n     .query({\"age\": 35, \"city\": \"Bordeaux\"})\r\n     .send(function(jacksReponse) {\r\n     \t// Callback success\r\n     }, function(jacksError) {\r\n     \t// Callback error\r\n     });\r\n```\r\n\r\n## jacksRequest.header(&lt;String&gt; name, &lt;String&gt; value)\r\nAdd a request header.\r\n```Javascript\r\njacks().get(\"http://myurl\")\r\n     .header(\"X-MY-HEADER\", \"foo\")\r\n```\r\n\r\n## jacksRequest.use(&lt;String&gt; pluginName) | use(&lt;Function&gt; pluginFn)\r\nUse a plugin. Parameter can be the name of a declared plugin or a function for a live plugin\r\n```Javascript\r\njacks().get(\"http://myurl\")\r\n     .use(\"myPlugin\")\r\n     .use(function(jacksRequest) {\r\n\t// Plugin code\r\n     })\r\n```\r\nThe plugin will be used for this request only.\r\n\r\n## jacksRequest.on(&lt;String&gt; eventName, &lt;Function&gt; callback)\r\nRegister a callback for an event on the request.\r\n\r\nAvailable events\r\n* timeout : when the request has been aborted due to a timeout\r\n* abort : when the request has been aborted\r\n* loadstart : XMLHttpRequest loadstart event\r\n* loadend : XMLHttpRequest loadend event\r\n* progress : XMLHttpRequest progress event\r\n* upload-progress : XMLHttpRequest upload progress event\r\n\r\n## jacksRequest.abort()\r\nAborts the request.\r\n\r\n## jacksRequest.sync()\r\nSwitches the request to synchronous mode. By default it's asynchronous.\r\n\r\n## jacksRequest.timeout(&lt;int&gt; delay)\r\nDefines a timeout for the request. After the delay (in ms) the request will be aborted.\r\n\r\n## jacksRequest.send(&lt;Function&gt; callback, &lt;function&gt; error)\r\nSends the request.\r\n\r\n## jacksRequest.sendAsBinary(&lt;Function&gt; callback, &lt;function&gt; error)\r\nSends the request as binary.\r\n\r\n### callback\r\nThe callback function takes JacksResponse object as parameter witch contains\r\n```Javascript\r\n{\r\n\tstatus : <http status code>,\r\n\tstatusText : <http status text>,\r\n\tresponseText : <raw response body>,\r\n\tresponse : <parsed response body. The parser is selected with Content-Type header. If no parser is found, will contain the raw response body>,\r\n\theaders : <response headers>,\r\n     getHeader(name): <function to get one header. Delegates it to xhr>\r\n}\r\n```\r\n\r\n### error\r\nThe error function takes a JacksError as parameter with contains\r\n```Javascript\r\n{\r\n\turl : <url called>\r\n\ttype : <error type>\r\n}\r\n```\r\nType will be \r\n - \"timeout\" if request has been interrupted after a timeout\r\n - \"abort\" if request has been aborted\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}